{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","useState","pokemonData","setPokemonData","loading","setLoading","getPokemonData","a","fetch","pokemon","url","response","json","data","useEffect","className","alt","style","width","src","id","name","weight","height","types","type","CardList","Pokemons","map","App","state","pokemons","then","list","setState","results","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAGaA,G,MAAO,SAAAC,GAAU,IAAD,EACUC,mBAAS,IADnB,mBAClBC,EADkB,KACNC,EADM,OAEIF,oBAAS,GAFb,mBAElBG,EAFkB,KAEVC,EAFU,KAInBC,EAAc,uCAAE,8BAAAC,EAAA,sEACKC,MAAMR,EAAMS,QAAQC,KADzB,cACZC,EADY,gBAECA,EAASC,OAFV,OAEZC,EAFY,OAGlBV,EAAeU,GACfR,GAAW,GAJO,2CAAF,qDAUvB,OAFGS,qBAAU,kBAAIR,MAAiB,KAErB,IAAVF,EACQ,0CAIJ,yBAAKW,UAAU,kBACf,yBAAKC,IAAI,UAAUC,MAAO,CAACC,MAAM,SAAUC,IAAG,wDAAmDjB,EAAYkB,GAA/D,UAC9C,2BAAIlB,EAAYkB,IAChB,oCAAUpB,EAAMS,QAAQY,MACxB,uCAAanB,EAAYoB,OAAzB,eAA6CpB,EAAYqB,QACzD,2BAAIrB,EAAYsB,MAAM,GAAGC,KAAKJ,SCvBzBK,EAAW,SAAA1B,GAErB,OAAQ,yBAAKe,UAAU,aAEdf,EAAM2B,SAASC,KAAI,SAAAnB,GAAO,OAC1B,kBAAC,EAAD,CAAMA,QAASA,SCkCZoB,G,wDArCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,SAAU,IAHA,E,gEAUO,IAAD,OAClBvB,MAAM,+CACHwB,MAAK,SAAArB,GAAQ,OAAIA,EAASC,UAC1BoB,MAAK,SAAAC,GAAI,OAAI,EAAKC,SAAS,CAAEH,SAAUE,EAAKE,e,+BAOvC,IACDJ,EAAUK,KAAKN,MAAfC,SAGP,OACE,yBAAKhB,UAAU,OACX,uCAIF,kBAAC,EAAD,CAAUY,SAAUI,IALtB,IAKmC,6BALnC,KAK0C,kC,GA/B9BM,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.023f69e8.chunk.js","sourcesContent":["import React,{useState,useEffect} from \"react\";\nimport './card.styles.css'\n\nexport const Card = props => {\n    const [pokemonData,setPokemonData]=useState([]);\n    const [loading,setLoading] = useState(true);\n   \n    const getPokemonData =async () => {\n        const response = await fetch(props.pokemon.url);\n        const data = await response.json();\n        setPokemonData(data);\n        setLoading(false);\n        \n       \n    }\n    useEffect(()=>getPokemonData(),[])\n  \n if(loading===true){\n     return <h2>loading...</h2>\n }else \n    return(       \n\n        <div className='card-container'>\n        <img alt=\"pokemon\" style={{width:'200px'}} src={`https://pokeres.bastionbot.org/images/pokemon/${pokemonData.id}.png`}/>\n        <p>{pokemonData.id}</p>     \n        <p>name: {props.pokemon.name}</p>\n        <p>whight : {pokemonData.weight}   height : {pokemonData.height}</p>\n        <p>{pokemonData.types[0].type.name}</p> \n        </div>\n\n    )\n    \n}\n    \n\n\n","import React from 'react'\n import './card-list.styles.css'\n import {Card} from '../card/card.component'\n\nexport const CardList = props => {\n\n   return( <div className='card-list'>\n       \n        {   props.Pokemons.map(pokemon=>\n            <Card pokemon={pokemon}/>\n            )\n        }\n    </div>)\n};","import React from 'react';\nimport { CardList } from './components/card-list/card-list.component'\n// import {SearchBox} from './components/search-box/search-box.component';\nimport './App.css'\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      pokemons: [],\n     // searchField: ''\n    };\n    // this.handleChange=this.handleChange.bind(this);\n\n  }\n  \n  componentDidMount() {\n    fetch('https://pokeapi.co/api/v2/pokemon?limit=100')\n      .then(response => response.json())\n      .then(list => this.setState({ pokemons: list.results }))\n\n  }\n  // handleChange = (e) => {\n  //   this.setState({searchField:e.target.value})\n  // }\n\n  render() {\n    const {pokemons}=this.state;\n    // const filteredPokemons=pokemons.filter(pokemon=>pokemon.name.toLowerCase().includes(searchField.toLowerCase()))\n    \n    return (\n      <div className='App'>        \n          <h1>Pokemon</h1>\n         {/* <SearchBox placeholder='search pokemon' \n          handleChange={this.handleChange}\n          />         */}\n        <CardList Pokemons={pokemons} /> <br/>  <br/>     \n      </div>\n\n    );\n  }\n\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}